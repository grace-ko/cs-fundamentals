1. Write pseudocode for bubble sort.
FUNCTION bubbleSort(collection)
   REPEAT
     SET swapped to false
     FOR i = FIRST INDEX of collection to LAST INDEX of collection - 1
       IF collection[i] > collection[i + 1] THEN
         SET tmp to collection[i]
         SET collection[i] to collection[i + 1]
         SET collection[i + 1] to tmp
         SET swapped to true
       END IF
     END FOR
   UNTIL swapped is FALSE
   RETURN collection
 END FUNCTION

2. Write pseudocode for quicksort.
FUNCTION quickSort(collection, left, right)
  INITIALIZE pivot
  INITIALIZE partitionIndex
  IF left < right
    SET pivot to right
    CALL partition(collection, pivot, left, right) SET to partitionIndex
    CALL quickSort(collection, left, partitionIndex - 1)
    CALL quickSort(collection, partitionIndex + 1, right)
  END IF
  RETURN collection
END FUNCTION

FUNCTION partition(collection, pivot, left, right)
  SET pivotValue to collection[pivot]
  SET partitionIndex to left
  FOR i = left to right
    IF collection[i] < pivotValue
      CALL swap(collection, i, partitionIndex)
      INCREMENT partitionIndex
    END IF
  END FOR
  CALL swap(collection, right, partitionIndex)
  RETURN partitionIndex
END FUNCTION

FUNCTION swap(collection, i, j)
  SET temp to collection[i]
  SET collection[i] to collection[j]
  SET collection[j] to temp
END FUNCTION

3. We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. Walking through each algorithm with a few sample collections may help.
All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?

Both quicksort and mergesort have O(nlogn) efficiency. Quicksort has in place sorting technique that saves space can efficient especially with arrays when a good pivot is selected. Mergesort can be more efficient with linked lists, grows slower for a large input, and is more stable than quicksort. In a bucket sort, the elements of an array are distributed into buckets. Each bucket is sorted individually and the elements are put back into the original array. It's a comparison sort algorithm and arrays are good inputs.
