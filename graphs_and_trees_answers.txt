Exercises
Q1. What is a binary tree and what makes it unique to other trees?
A: Binary tree is a data structure that has a tree like structure with the root node on top and grows downward. It's unique in that each node has maximum of up to two child nodes.

Q2. What is a heuristic?
A: A heuristic is a technique used to approximate an "acceptable" solution, making educated guesses and trading accuracy for speed.

Q3. What is another problem besides the shortest-path problem that requires the use of heuristics?
A: Another example of a problem that might use heuristics is a chess game. The computer may play well to a certain level but it's hard to make every move perfect.

Q4. What is the difference between a depth-first search and a breadth-first search?
A: The difference between a DFS and BFS is the order in which it searches. DFS traverses an entire branch down to the leaf node before moving back up to the next branch whereas BFS search level by level, neighboring nodes before child nodes.

Q5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.
A: An undirected graph would consist of nodes whose edges are bidirectional; it's not required to go in one direction. Acyclic graph does not have a loop with a leaf from which no pointer leaves. An unweighted graph does have edges that are labeled with values that may be used for measurement or prioritization.

Q6. What kind of graph is a binary search tree?
A: a BST is a type of a binary tree with each node having maximum of two child nodes. What's special about BST is that the left child node is smaller than the parent node but the right child node is bigger than the parent node and the nodes are sorted.

Programming Questions
Q1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

function BST(value) {
  this.value = value;
  this.right = null;
  this.left = null;
}

BST.prototype.insert = function(value) {
  if (value <= this.value) {
    if(!this.left) this.left = new BST(value);
    else this.left.insert(value);
  }
  else if (value > this.value) {
    if (!this.right) this.right = new BST(value);
    else this.right.insert(value);
  }
}

BST.prototype.contains = function(value) {
  if (this.value === value) return true;
  if (value < this.value) {
    if (!this.left) return false;
    else return this.left.contains(value);
  }
  else if (value > this.value) {
    if (!this.right) return false;
    else return this.right.contains(value);
  }
};

Q2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.
